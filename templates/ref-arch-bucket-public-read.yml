---
AWSTemplateFormatVersion: 2010-09-09
Description: This CloudFormation Template adjusts the permissions of the Bucket Objects
  to allow public read on each object.
Parameters:
  Bucket:
    Description: The Bucket required for the custom resource to function.
    Type: String
Resources:
  # Creates a role for lambda giving it some specific log and bucket access
  ConfigRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ConfigPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: Logging
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Sid: ConfigBucketWriteAccess
            Effect: Allow
            Action: '*'
            Resource:
            - !Sub arn:aws:s3:::${Bucket}/*
            - !Sub arn:aws:s3:::${Bucket}
  # Creating a custom configuration resource to pass into the function created below
  # The bucket is passed in from calling script and points to the web bucket
  UpdateConfig:
    # see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cfn-customresource.html
    Type: Custom::ConfigFile
    Properties:
      ServiceToken: !GetAtt UpdateConfigFunction.Arn
      Region: !Ref AWS::Region
      Bucket: !Ref Bucket
  # Creates a lambda to set permissions on a specific bucket to public read. The bucket and region
  # are passed in as properties from the custom resource above
  UpdateConfigFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Change Files in Bucket to Public Read.
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt ConfigRole.Arn
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse

          s3 = boto3.resource('s3')

          def create(properties, physical_id):
            region = properties['Region']
            bucket = properties['Bucket']
            # Change Permissions to Public Read for All Files in Bucket Created
            client = boto3.client('s3')
            b = []
            my_bucket = s3.Bucket(bucket)
            for file in my_bucket.objects.all():
                b.append(file.key)
            for item in b:
                response = client.put_object_acl(ACL='public-read',Bucket=bucket,Key=item)
            print (b)
            return cfnresponse.SUCCESS, None

          def update(properties, physical_id):
            return create(properties, physical_id)

          def delete(properties, physical_id):
            region = properties['Region']
            bucket = properties['Bucket']
            deleteAll(bucket, '')
            return cfnresponse.SUCCESS, physical_id

          def deleteAll(bucket, prefix):
              client = boto3.client('s3')

              paginator = client.get_paginator('list_objects')
              for result in paginator.paginate(Bucket=bucket, Delimiter='/', Prefix=prefix):
                  # checking if there are nested folders
                  if result.get('CommonPrefixes') is not None:
                      for subdir in result.get('CommonPrefixes'):
                          # copy files in the nested folders
                          deleteAll(bucket, subdir['Prefix'])
                  if result.get('Contents') is not None:
                      for file in result.get('Contents'):
                          client.delete_object(
                              Bucket=bucket,
                              Key=file['Key'],
                          )

          def handler(event, context):
            print "Received event: %s" % json.dumps(event)

            status = cfnresponse.FAILED
            new_physical_id = None

            try:
              properties = event.get('ResourceProperties')
              physical_id = event.get('PhysicalResourceId')

              status, new_physical_id = {
                'Create': create,
                'Update': update,
                'Delete': delete
              }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)
            except Exception as e:
              print "Exception: %s" % e
              status = cfnresponse.FAILED
            finally:
              cfnresponse.send(event, context, status, {}, new_physical_id)
...

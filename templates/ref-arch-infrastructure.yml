---
Description: This CloudFormation Template Deploys Reference Architecture of a Multi-tenant
  Identity Platform featuring Amazon Cognito. It will deploy a VPC, Security Groups,
  ECS Cluster, 7 ECS Task Definitions & Services, Application Load Balancer, API Gateway,
  S3 Buckets, CodePipeline, CodeBuild Projects. It will perform a Health Check with
  a Custom Resource, and deploy an initial provisioning of a System Admin User for
  the Identity Platform. You will be billed for the AWS resources used if you create
  a stack from this template. (qs-1nlegmi3i)
Metadata:
  # see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-interface.html
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Network Configuration
      Parameters:
      - VPCID
      - PrivateSubnet1ID
      - PrivateSubnet2ID
      - PublicSubnet1ID
      - PublicSubnet2ID
    - Label:
        default: AWS Deployment Configuration
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix
    - Label:
        default: AWS LabX CloudFormation Deployment Configuration
      Parameters:
      - KeyPairName
      - InstanceType
    - Label:
        default: AWS LabX CloudFormation Sys Admin Configuration
      Parameters:
      - Email
      - Company
      - Firstname
      - Lastname
    - Label:
        default: AWS LabX CloudFormation DynamoDB Table Configuration
      Parameters:
      - UserTable
      - TenantTable
    ParameterLabels:
      AvailabilityZones:
        default: Availability Zones
      KeyPairName:
        default: Key Pair Name
      InstanceType:
        default: Instance Type
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PublicSubnet1ID:
        default: Public Subnet 1 ID
      PublicSubnet2ID:
        default: Public Subnet 2 ID
      QSS3KeyPrefix:
        default: Deployment S3 Key Prefix
      QSS3BucketName:
        default: Deployment S3 Bucket Name
      VPCID:
        default: VPC ID
      Email:
        default: Email Address
      Company:
        default: Company Name
      Firstname:
        default: First Name
      Lastname:
        default: Last Name
      UserTable:
        default: User
      TenantTable:
        default: Tenant
Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Public/private key pairs allow you to securely connect to your instance
      after it launches
  InstanceType:
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.large
    Description: Enter t2.micro, t2.small, or t2.large. Default is t2.small.
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: The ID of the VPC.
  PublicSubnet1ID:
    Type: AWS::EC2::Subnet::Id
    Description: ID for the public DMZ subnet 1 located in Availability Zone 1
  PublicSubnet2ID:
    Type: AWS::EC2::Subnet::Id
    Description: ID for the public DMZ subnet 2 located in Availability Zone 2
  PrivateSubnet1ID:
    Type: AWS::EC2::Subnet::Id
    Description: ID for private subnet 1 located in Availability Zone 1.
  PrivateSubnet2ID:
    Type: AWS::EC2::Subnet::Id
    Description: ID for private subnet 2 located in Availability Zone 2.
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Deployment bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Deployment assets. Deployment bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Deployment key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-). DO NOT USE a forward slash (/) at the end of the prefix.
    Default: aws-labx-cloudformation-dev
    Description: S3 key prefix for the Deployment assets. Deployment key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  Company:
    Type: String
    Default: MyCompanyName
    Description: The Name of the Company that will manage the Reference Architecture.
  Email:
    Type: String
    Description: The Email Address of the Sys Admin.
    Default: email@example.com
  Firstname:
    Type: String
    Description: The First Name of the Sys Admin.
    Default: MyFirstName
  Lastname:
    Type: String
    Description: The Last Name of the Sys Admin.
    Default: MyLastName
  UserTable:
    Type: String
    Description: The DynamoDB Table for Users of the Multi-Tenant System
    Default: User
  TenantTable:
    Type: String
    Description: The DynamoDB Table for Tenants of the Multi-Tenant System
    Default: Tenant
# Rules specify which values they can specify for parameters that are declared in 
# the AWS CloudFormation template used to create the product they are attempting to use. 
# Rules are useful for preventing end users from inadvertently specifying an incorrect value.
Rules:
  KeyPairsNotEmpty:
    Assertions:
    - Assert:
        !Not
        - Fn::EachMemberEquals:
          - Fn::RefAll: AWS::EC2::KeyPair::KeyName
          - ''
      AssertDescription: All key pair parameters must not be empty
  SubnetsInVPC:
    Assertions:
    - Assert:
        Fn::EachMemberIn:
        - Fn::ValueOfAll:
          - AWS::EC2::Subnet::Id
          - VpcId
        - Fn::RefAll: AWS::EC2::VPC::Id
      AssertDescription: All subnets must be in the VPC
# The first 4 resources are created unders the running account role assuming it's a system level
# user with appropriate access. Ensure your role meets this criteria      
Resources:
  # This creates two security groups: one to allow all traffic to the load balancer in front
  # of the EC2 instances and another to allow all traffic to those EC2 instances for the previous
  # security group
  SecurityGroups:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-security-groups.yml
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VPC: !Ref VPCID
  # This creates and runs a stack that creates the application load balancer
  ALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-load-balancers.yml
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VPC: !Ref VPCID
        # Load balancer will cover the two public subnets in VPC created in start script
        Subnets:
          !Join
          - ','
          - - !Ref PublicSubnet1ID
            - !Ref PublicSubnet2ID
        # Will have the load balancer secruity group from above applied
        SecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup
  # Creates the ECS cluster        
  ECS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-ecs-cluster.yml
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        InstanceType: !Ref InstanceType
        ClusterSize: 4
        VPC: !Ref VPCID
        KeyName: !Ref KeyPairName
        # Runs using the previously created ECS security group on the VPC created in start script
        # in the 2 private subnets on the VPC
        SecurityGroup: !GetAtt SecurityGroups.Outputs.ECSHostSecurityGroup
        Subnets:
          !Join
          - ','
          - - !Ref PrivateSubnet1ID
            - !Ref PrivateSubnet2ID
  # Creates the IAM roles the system components will need to user to interact            
  Role:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-roles.yml
      Parameters:
        EnvironmentName: !Ref AWS::StackName

  # Creates the API Gateway
  API:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-api-gateway.yml
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        LambdaInvocationRole: !GetAtt Role.Outputs.LambdaInvocationRole
        LambdaExecutionRole: !GetAtt Role.Outputs.LambdaExecutionRole
        ServiceUrl: !GetAtt ALB.Outputs.LoadBalancerUrl
        S3Bucket: !Ref QSS3BucketName
        S3BucketPrefix: !Ref QSS3KeyPrefix

  # NOTE: this portion deploys the web client. It utilizes wait handles and wait conditions
  # due to the long running nature of setting it up.
  # NOTE: COMMENTING ALL OF THIS OUT AND KEEPING FOR REFERENCE FOR NOW IF NEEDED
  #   SHOULD EVENTUALLY BE REMOVED.
  # Registers a handle for use in the WebClient resource 
  # WaitHandleWebClient:
  #   # see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-waitconditionhandle.html
  #   Type: AWS::CloudFormation::WaitConditionHandle
  # # Deploys the web client  
  # WebClient:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-web-deployment-pipeline.yml
  #     Parameters:
  #       ServiceUrl: !GetAtt API.Outputs.RootUrl
  #       ServiceName: client
  #       TemplateBucket: !Ref QSS3BucketName
  #       TemplatePrefix: !Ref QSS3KeyPrefix
  #       # The signal control URL for the wait
  #       WaitURL: !Ref WaitHandleWebClient
  # # Conditions for the wait. This will wait once for one hour then this stack will continue
  # WaitConditionWebClient:
  #   # see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-waitcondition.html
  #   Type: AWS::CloudFormation::WaitCondition
  #   DependsOn:
  #   - WebClient
  #   Properties:
  #     Handle:
  #       Ref: WaitHandleWebClient
  #     Timeout: '3600'
  #     Count: '1'
  # # Changes permission on all objects in web bucket to read. This might not be necessary as it 
  # # looks like the build process does this...this will all go away anayways
  # WebPerm:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-bucket-public-read.yml
  #     Parameters:
  #       Bucket: !GetAtt WebClient.Outputs.WebBucket
  # Creates an ECR and a bucket for images
  BucketRepository:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-docker-bucket-repository.yml
  # Creates the Dynamo table for app
  DynamoDBTables:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-dynamodb-tables.yml
      Parameters:
        UserTableName: !Ref UserTable
        TenantTableName: !Ref TenantTable
  # A series of wait handles for the docker micros
  WaitHandleUserService:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitHandleAuthService:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitHandleTenantService:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitHandleRegService:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitHandleSysService:
    Type: AWS::CloudFormation::WaitConditionHandle
  UserService:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-deployment-pipeline-test.yml
      Parameters:
        VPC: !Ref VPCID
        Cluster: !GetAtt ECS.Outputs.Cluster
        ServiceUrl: !GetAtt API.Outputs.RootUrl
        SnsRole: !GetAtt Role.Outputs.SNSRoleArn
        UserTable: !GetAtt DynamoDBTables.Outputs.UserTable
        TenantTable: !GetAtt DynamoDBTables.Outputs.TenantTable
        Listener: !GetAtt ALB.Outputs.Listener
        Path: /user*
        HealthCheck: /user/health
        ServiceName: user-manager
        Priority: 2
        ContainerPort: 3001
        TemplateBucket: !Ref QSS3BucketName
        TemplatePrefix: !Ref QSS3KeyPrefix
        WaitURL: !Ref WaitHandleUserService
        CloudFormationExecutionRole: !GetAtt Role.Outputs.CloudFormationExecutionRole
        ArtifactBucket: !GetAtt BucketRepository.Outputs.ArtifactBucket
        Repository: !GetAtt BucketRepository.Outputs.Repository
  AuthService:
    Type: AWS::CloudFormation::Stack
    DependsOn:
    - UserService
    - WaitConditionUserService
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-deployment-pipeline-test.yml
      Parameters:
        VPC: !Ref VPCID
        Cluster: !GetAtt ECS.Outputs.Cluster
        ServiceUrl: !GetAtt API.Outputs.RootUrl
        SnsRole: !GetAtt Role.Outputs.SNSRoleArn
        UserTable: !GetAtt DynamoDBTables.Outputs.UserTable
        TenantTable: !GetAtt DynamoDBTables.Outputs.TenantTable
        Listener: !GetAtt ALB.Outputs.Listener
        Path: /auth*
        HealthCheck: /auth/health
        ServiceName: auth-manager
        Priority: 3
        ContainerPort: 3000
        TemplateBucket: !Ref QSS3BucketName
        TemplatePrefix: !Ref QSS3KeyPrefix
        WaitURL: !Ref WaitHandleAuthService
        CloudFormationExecutionRole: !GetAtt Role.Outputs.CloudFormationExecutionRole
        ArtifactBucket: !GetAtt BucketRepository.Outputs.ArtifactBucket
        Repository: !GetAtt BucketRepository.Outputs.Repository
  TenantService:
    Type: AWS::CloudFormation::Stack
    DependsOn:
    - AuthService
    - WaitConditionAuthService
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-deployment-pipeline-test.yml
      Parameters:
        VPC: !Ref VPCID
        Cluster: !GetAtt ECS.Outputs.Cluster
        ServiceUrl: !GetAtt API.Outputs.RootUrl
        SnsRole: !GetAtt Role.Outputs.SNSRoleArn
        UserTable: !GetAtt DynamoDBTables.Outputs.UserTable
        TenantTable: !GetAtt DynamoDBTables.Outputs.TenantTable
        Listener: !GetAtt ALB.Outputs.Listener
        Path: /tenant*
        HealthCheck: /tenant/health
        ServiceName: tenant-manager
        Priority: 4
        ContainerPort: 3003
        TemplateBucket: !Ref QSS3BucketName
        TemplatePrefix: !Ref QSS3KeyPrefix
        WaitURL: !Ref WaitHandleTenantService
        CloudFormationExecutionRole: !GetAtt Role.Outputs.CloudFormationExecutionRole
        ArtifactBucket: !GetAtt BucketRepository.Outputs.ArtifactBucket
        Repository: !GetAtt BucketRepository.Outputs.Repository
  RegService:
    Type: AWS::CloudFormation::Stack
    DependsOn:
    - TenantService
    - WaitConditionTenantService
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-deployment-pipeline-test.yml
      Parameters:
        VPC: !Ref VPCID
        Cluster: !GetAtt ECS.Outputs.Cluster
        ServiceUrl: !GetAtt API.Outputs.RootUrl
        SnsRole: !GetAtt Role.Outputs.SNSRoleArn
        UserTable: !GetAtt DynamoDBTables.Outputs.UserTable
        TenantTable: !GetAtt DynamoDBTables.Outputs.TenantTable
        Listener: !GetAtt ALB.Outputs.Listener
        Path: /reg*
        HealthCheck: /reg/health
        ServiceName: tenant-registration
        Priority: 5
        ContainerPort: 3004
        TemplateBucket: !Ref QSS3BucketName
        TemplatePrefix: !Ref QSS3KeyPrefix
        WaitURL: !Ref WaitHandleRegService
        CloudFormationExecutionRole: !GetAtt Role.Outputs.CloudFormationExecutionRole
        ArtifactBucket: !GetAtt BucketRepository.Outputs.ArtifactBucket
        Repository: !GetAtt BucketRepository.Outputs.Repository
  SysService:
    Type: AWS::CloudFormation::Stack
    DependsOn:
    - RegService
    - WaitConditionRegService
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-deployment-pipeline-test.yml
      Parameters:
        VPC: !Ref VPCID
        Cluster: !GetAtt ECS.Outputs.Cluster
        ServiceUrl: !GetAtt API.Outputs.RootUrl
        SnsRole: !GetAtt Role.Outputs.SNSRoleArn
        UserTable: !GetAtt DynamoDBTables.Outputs.UserTable
        TenantTable: !GetAtt DynamoDBTables.Outputs.TenantTable
        Listener: !GetAtt ALB.Outputs.Listener
        Path: /sys*
        HealthCheck: /sys/health
        ServiceName: system-registration
        Priority: 6
        ContainerPort: 3011
        TemplateBucket: !Ref QSS3BucketName
        TemplatePrefix: !Ref QSS3KeyPrefix
        WaitURL: !Ref WaitHandleSysService
        CloudFormationExecutionRole: !GetAtt Role.Outputs.CloudFormationExecutionRole
        ArtifactBucket: !GetAtt BucketRepository.Outputs.ArtifactBucket
        Repository: !GetAtt BucketRepository.Outputs.Repository
  # Corresponding wait condition for the user wait handle
  WaitConditionUserService:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn:
    - UserService
    Properties:
      Handle:
        Ref: WaitHandleUserService
      Timeout: '2400'
      Count: '1'
  WaitConditionAuthService:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn:
    - AuthService
    Properties:
      Handle:
        Ref: WaitHandleAuthService
      Timeout: '2400'
      Count: '1'
  WaitConditionTenantService:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn:
    - TenantService
    Properties:
      Handle:
        Ref: WaitHandleTenantService
      Timeout: '2400'
      Count: '1'
  WaitConditionRegService:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn:
    - RegService
    Properties:
      Handle:
        Ref: WaitHandleRegService
      Timeout: '2400'
      Count: '1'
  WaitConditionSysService:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn:
    - SysService
    Properties:
      Handle:
        Ref: WaitHandleSysService
      Timeout: '2400'
      Count: '1'
  # Cleanup stacks all using the same nested stack      
  UserServiceCleanup:
    Type: AWS::CloudFormation::Stack
    DependsOn: Role
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-clean-cfnstack.yml
      Parameters:
        ServiceToken: !GetAtt Role.Outputs.CleanupRole
        Stack: !GetAtt UserService.Outputs.ServiceStack
  AuthServiceCleanup:
    Type: AWS::CloudFormation::Stack
    DependsOn: Role
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-clean-cfnstack.yml
      Parameters:
        ServiceToken: !GetAtt Role.Outputs.CleanupRole
        Stack: !GetAtt AuthService.Outputs.ServiceStack
  TenantServiceCleanup:
    DependsOn: Role
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-clean-cfnstack.yml
      Parameters:
        ServiceToken: !GetAtt Role.Outputs.CleanupRole
        Stack: !GetAtt TenantService.Outputs.ServiceStack
  RegServiceCleanup:
    Type: AWS::CloudFormation::Stack
    DependsOn: Role
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-clean-cfnstack.yml
      Parameters:
        ServiceToken: !GetAtt Role.Outputs.CleanupRole
        Stack: !GetAtt RegService.Outputs.ServiceStack
  SysServiceCleanup:
    Type: AWS::CloudFormation::Stack
    DependsOn: Role
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-clean-cfnstack.yml
      Parameters:
        ServiceToken: !GetAtt Role.Outputs.CleanupRole
        Stack: !GetAtt SysService.Outputs.ServiceStack
  # Cleans both the bucket and the repo
  BucketRepositoryCleanup:
    Type: AWS::CloudFormation::Stack
    DependsOn: Role
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-cleanup-bucket-repository.yml
      Parameters:
        Bucket: !GetAtt BucketRepository.Outputs.ArtifactBucket
        Repository: !GetAtt BucketRepository.Outputs.Repository
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        RoleArn: !GetAtt Role.Outputs.CleanupRole
  # NOTE: KEEPING THIS AS WELL FOR REFERENCE, REMOVE EVENTUALLY
  # 2 Cleanup stacks for buckets using ref-arch-bucket.yml
  # WebClientCleanup:
  #   Type: AWS::CloudFormation::Stack
  #   DependsOn: Role
  #   Properties:
  #     TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-clean-bucket.yml
  #     Parameters:
  #       Bucket: !GetAtt WebClient.Outputs.WebBucket
  #       ServiceToken: !GetAtt Role.Outputs.CleanupRole
  # WebArtifactCleanup:
  #   Type: AWS::CloudFormation::Stack
  #   DependsOn: Role
  #   Properties:
  #     TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-clean-bucket.yml
  #     Parameters:
  #       Bucket: !GetAtt WebClient.Outputs.ArtifactBucket
  #       ServiceToken: !GetAtt Role.Outputs.CleanupRole
  # Creates an initial system admin for the multi-tenant system
  SysAdmin:
    Type: AWS::CloudFormation::Stack
    DependsOn:
    - WaitConditionUserService
    - WaitConditionAuthService
    - WaitConditionTenantService
    - WaitConditionRegService
    - WaitConditionSysService
    - UserService
    - AuthService
    - TenantService
    - RegService
    - SysService
    - SysAdminCleanup
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-rest-request-create.yml
      Parameters:
        Domain: !GetAtt API.Outputs.RootUrl
        Protocol: https://
        Body:
          Fn::Sub: '{"companyName":"${Company}","accountName":"${Company}","ownerName":"${Email}","email":"${Email}","userName":"${Email}","firstName":"${Firstname}","lastName":"${Lastname}"}'
        Path: /sys/admin
        Method: POST
        S3Bucket: !Ref QSS3BucketName
        S3BucketPrefix: !Ref QSS3KeyPrefix
  # x
  SysAdminCleanup:
    Type: AWS::CloudFormation::Stack
    DependsOn:
    - WaitConditionUserService
    - WaitConditionAuthService
    - WaitConditionTenantService
    - WaitConditionRegService
    - WaitConditionSysService
    - UserService
    - AuthService
    - TenantService
    - RegService
    - SysService
    - UserServiceCleanup
    - AuthServiceCleanup
    - TenantServiceCleanup
    - RegServiceCleanup
    - SysServiceCleanup
    - BucketRepositoryCleanup
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/ref-arch-rest-request-delete.yml
      Parameters:
        Domain: !GetAtt ALB.Outputs.LoadBalancerUrl
        Protocol: http://
        Body: 'null'
        Path: /user/tenants
        Method: DELETE
        S3Bucket: !Ref QSS3BucketName
        S3BucketPrefix: !Ref QSS3KeyPrefix
Outputs:
  AlbUrl:
    Description: The URL endpoint for the product service
    Value: !GetAtt ALB.Outputs.LoadBalancerUrl
  ApiUrl:
    Description: The URL endpoint for the product service
    Value: !GetAtt API.Outputs.RootUrl
  # Website:
  #   Description: The URL endpoint for the product service
  #   Value: !GetAtt WebClient.Outputs.Website


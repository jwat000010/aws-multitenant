---
AWSTemplateFormatVersion: 2010-09-09
Description: This CloudFormation Template creates the CI & CD pipeline for the AngularClient.
Parameters:
  TemplateBucket:
    Type: String
  TemplatePrefix:
    Type: String
  ServiceUrl:
    Type: String
  ServiceName:
    Type: String
  WaitURL:
    Type: String
Resources:
  # Create the bucket the client application will live in. A future task will fully web site enable
  # but for now enabling CORS and other necessary items
  WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          AllowedOrigins:
          - '*'
          MaxAge: '3000'
  # Granting cloud formation access to all of the systems resources it needs          
  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "cloudformation.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Resource: '*'
            Effect: Allow
            Action:
            - ecs:*
            - ecr:*
            - iam:*
            - s3:*
            - ec2:*
            - elasticloadbalancing:*
            - logs:*
  # Granting codebuild limited access to logs, and the web and artifact buckets          
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Resource: '*'
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - ecr:GetAuthorizationToken
          - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
            Effect: Allow
            Action:
            - s3:*
          - Resource: !Sub arn:aws:s3:::${WebBucket}/*
            Effect: Allow
            Action:
            - s3:*
  # Granting fine grained control to codepipeline on the buckets, ec2, loadbalancing, and logs
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Resource:
            - !Sub arn:aws:s3:::${ArtifactBucket}/*
            - !Sub arn:aws:s3:::${WebBucket}
            - !Sub arn:aws:s3:::${TemplateBucket}
            - !Sub arn:aws:s3:::${WebBucket}/*
            - !Sub arn:aws:s3:::${TemplateBucket}/*
            Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
          - Resource: '*'
            Effect: Allow
            Action:
            - codebuild:StartBuild
            - codebuild:BatchGetBuilds
            - cloudformation:*
            - iam:PassRole
            - ec2:*
            - elasticloadbalancing:*
            - logs:*
  # Creating the artifact bucket. CodeBuild will work from there
  ArtifactBucket:
    Type: AWS::S3::Bucket
  # Create a CodeBuild project 
  CodeBuildProject:
    # see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codebuild-project.html
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Location: !Ref ArtifactBucket
        Type: S3
      Source:
        Location: !Sub ${ArtifactBucket}/source.zip
        Type: S3
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - cd "${SERVICE_NAME}"
                - cd src
                - sudo apt-get update
                - sudo apt-get install python-software-properties -y
                - sudo apt-add-repository ppa:brightbox/ruby-ng -y
                - sudo apt-get update
                - sudo apt-get install ruby2.2 -y
                - sudo apt-get install ruby2.2-dev -y
                - sudo apt-get update && sudo apt-get install -y ruby ruby-dev && apt-get clean && sudo gem2.2 install compass
                - sudo npm install && sudo npm install grunt-cli && sudo npm install bower
                - ./node_modules/bower/bin/bower install --allow-root
            build:
              commands:
                - which sed
                - sed -i -e "s#DOMAIN_URL#$SERVICE_URL#g" app/scripts/constants.js
                - cat app/scripts/constants.js
                - pwd
                - ./node_modules/grunt-cli/bin/grunt build &
                - sleep 120
            post_build:
              commands:
                - pwd
                - aws s3 cp --recursive ./dist s3://"${WEBSITE_BUCKET}" --acl public-read
                - cd ../
                - curl -T body.json "${WAIT_HANDLE}"
                - echo BuildCompleted
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:8.11.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: AWS_DEFAULT_REGION
          Value: !Ref AWS::Region
        - Name: SERVICE_NAME
          Value: !Ref ServiceName
        - Name: WEBSITE_BUCKET
          Value: !Ref WebBucket
        - Name: SERVICE_URL
          Value: !Ref ServiceUrl
        - Name: WAIT_HANDLE
          Value: !Ref WaitURL
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildServiceRole
  Pipeline:
    # see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
      - Name: Source
        Actions:
        - Name: App
          ActionTypeId:
            Category: Source
            Owner: AWS
            Version: 1
            Provider: S3
          OutputArtifacts:
          - Name: App
          RunOrder: 1
          Configuration:
            S3Bucket: !Sub ${TemplateBucket}
            S3ObjectKey: !Sub ${TemplatePrefix}/app/packages/client/client.zip
      - Name: Build
        Actions:
        - Name: Build
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: 1
            Provider: CodeBuild
          Configuration:
            ProjectName: !Ref CodeBuildProject
          InputArtifacts:
          - Name: App
          OutputArtifacts:
          - Name: BuildOutput
          RunOrder: 1
Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
  Website:
    Value: !GetAtt WebBucket.WebsiteURL
  WebBucket:
    Value: !Ref WebBucket
  ArtifactBucket:
    Value: !Ref ArtifactBucket
...
